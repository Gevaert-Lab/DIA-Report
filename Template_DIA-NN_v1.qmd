---
title: "Proteomics Report: `r params$title`"
subtitle: "`r params$subtitle`"
author: "`r params$author`"
format: 
  html:
    fig-width: 12
    fig-height: 10
    toc: true
    toc-title: 'DE Analysis'
    css: style.css
title-block-banner: "#42b6ba"

execute: 
  echo: false
  warning: false
embed-resources: true
theme: 
 - cosmo
 - custom.scss
params:
  description: ""
  title: ""
  subtitle: ""
  author: "" 
  formula: ""
  comparisons: ""
  contrast: ""
  input_file: ""
  design_file: ""
  FC_thr: 1
  adjpval_thr: 0.05
  Proteotypic: TRUE
  pep_per_prot: 3
  nNonZero: 3
  aggr_method: "medianPolish"
  normalization: "quantiles"
  filtering_contaminats: ""
  contaminats_str: ""
  folder_prj: ""
  ensembl_annotation: ""
  ensembl_col: ""
  confounder_list: ""
  PCA_comparison: "Group"
  quantitatve_features: "Precursor.Quantity"
---

<!-- <style> -->

<!-- #logo -->

<!-- { -->

<!--     position: relative; -->

<!-- } -->

<!-- #logo img { -->

<!--     /*position: relative;*/ -->

<!--     top: 25px; -->

<!--     /*right: 0px;*/ -->

<!--     left: 50px; -->

<!--     position: fixed; -->

<!--     width: 125px; -->

<!--     } -->

<!-- #header .btn-group { -->

<!--     display: none; -->

<!-- } -->

<!-- body -->

<!-- { -->

<!--     position: absolute; -->

<!--     top: 150px; -->

<!-- } -->

<!-- </style> -->

<!-- <div id="logo" align="top"> -->

<!-- ```{r echo = FALSE} -->

<!-- knitr::include_graphics('images/vib_rf_medical_biotechnology_rgb_neg.jpg') -->

<!-- ``` -->

<!-- </div> -->

```{r input}
 #| output: false
source('utils_function.R')

required_packages = c("QFeatures","msqrob2","readxl","SummarizedExperiment","visdat","ggrepel", "dplyr","tidyverse","magrittr","here","tidyr","plotly","DT","tibble","MSnbase",
                    "factoextra","hrbrthemes","gridExtra","UpSetR",'logger', 'scales','pander')
#print(required_packages)
check_dependencies(required_packages)
# 
# library(QFeatures)
# library(msqrob2)
# library(readxl)
# library(SummarizedExperiment)
# library(visdat)
# library(ggrepel)
# library(dplyr)
# library(tidyverse)
# library(magrittr)
# library(here)
# library(tidyr)
# library(plotly)
# library(DT)
# library(tibble)
# library(MSnbase)
# library(factoextra)
# library(hrbrthemes)
# library(gridExtra)
# library(UpSetR)
#library(heatmaply)
# #webshot::install_phantomjs()
```

## Experiment

`r params$description`

```{r check_parameter}

formatter_data_frame <- function(df, ...) {
     pander::pander_return(df, style = 'simple')
}
log_formatter(formatter_data_frame)
log_formatter(formatter_glue)

if (params$contrast == '' ){
  stop("Check parameter file: contrast is not set" )
}

if (all(params$comparisons == '') ){
  stop("Check parameter file: comparisons is not set" )
}

if ( ! params$aggr_method %in% c('robustSummary','medianPolish','colMeans','colMedians')) {
  stop('normalization method not allowed.  Methods allowed are : [ robustSummary, medianPolish, colMeans ]' )
}
if (params$aggr_method  == 'medianPolish'){
  aggr_method_f <- MsCoreUtils::medianPolish
}
if (params$aggr_method  == 'RobustSummary'){
  aggr_method_f <- RobustSummary
}
if (params$aggr_method  == 'colMeans'){
  aggr_method_f <- base::colMeans
}
if (params$aggr_method  == 'colMeadians'){
  aggr_method_f <- matrixStats:::colMedians
}

if ( ! params$normalization %in% c("sum", "max", "center.mean", "center.median", "div.mean", "div.median", "diff.meda", "quantiles","quantiles.robust","vsn") ){ 
   stop('normalization method not allowed. Methods allowed are : [ sum, max, center.mean, center.median, div.mean, div.median, diff.meda, quantiles,quantiles.robust,vsn]' )
}

if (params$filtering_contaminats){
   if (params$contaminats_str == ""){
     stop("Please provide a string to filter the contaminats proteins (e.g.: Cont_,Contaminats,..)")
   } 
}
  ## to do visualize input contaminats_str(".","Result"))){
#   dir.create('./Result')
# }
# make a subfolder for each contrast
if (!dir.exists(file.path(params$folder_prj))){
  dir.create(file.path( params$folder_prj),recursive = TRUE)
}
 dir.create(file.path( params$folder_prj, "Result"),recursive = TRUE)
 min_col_need_design <- c("sample","run", "group", "replicate","filename")


```

## Import data

Reading DIA data from **`r params$input_file`** using *Precursor.Translated* intensities from DIA-NN.

All the precursors with *Q-value \< 0.01* are used for the analysis.

```{r import data}
  # 'peptidesRCB.txt'  

  data <- read.csv(params$input_file,sep='\t')
  ## deal csv  with different separated values 
  L <- readLines(params$design_file, n = 1)
  if (grepl(";", L)) design <- read.csv2(params$design_file) else design <- read.csv(params$design_file)

  checkDIANN<-check_DIANN_report(data, q_feature=params$quantitatve_features)
    
  if (checkDIANN$status == 1 ) {
    stop(checkDIANN$error)
    } 
  
  dfMsqrob <- dfToWideMsqrob( data, precursorquan = params$quantitatve_features)
 
  result_check <- check_design_data(dfMsqrob,design) 
  
  if (result_check$status == 1 |  is.na(result_check$type_raw) ){
    stop(result_check$error)
  }  
  
  check_groups<-checkGroups(inputParams= params$comparisons, dfDesign=design)
if (check_groups$status == 1){
    stop(check_groups$error)
}  

  if (all(params$confounder_list != '')) {
  check_confounder_list<-checkConfounder(confounder= params$confounder_list, colsDesign=colnames(design))
if (check_confounder_list$status == 1){
    stop(check_confounder_list$error)
}
  }
#log_info(params$confounder_list[1]) 

  
  if ( .Platform$OS.type == "unix" ){
    samplenames <- tibble(
   filename = gsub('\\\\','/' ,names(dfMsqrob)[str_which(names(dfMsqrob), result_check$type_raw)]), 
   base_name_sample =  basename(filename) ) 
  
  }else{
    samplenames <- tibble(
   filename = names(dfMsqrob)[str_which(names(dfMsqrob), result_check$type_raw)], 
   base_name_sample =  basename(filename) ) 
    
  }
  
  samplenames <- tibble(
   filename = names(dfMsqrob)[str_which(names(dfMsqrob), paste0('\\',result_check$type_raw))], 
   base_name_sample =  basename(filename) ) 
  
  samplenames <- samplenames %>% left_join(  design %>% dplyr::select(run, sample) , join_by(base_name_sample ==  run) )
 
 
  names(dfMsqrob)[str_which(names(dfMsqrob), paste0('\\',result_check$type_raw))] <- samplenames$sample
 
  diann_colname <- c("Precursor.Id" , "Modified.Sequence","Stripped.Sequence","Protein.Group",
  "Protein.Ids","Protein.Names","Genes","Proteotypic","First.Protein.Description")
 

```

## Filtering steps

```{r preparation }
#log_info('{colnames(dfMsqrob)}')
 pe <- readQFeatures( dfMsqrob,
                     fnames = "Precursor.Id",
                     ecol =  str_detect(names(dfMsqrob), paste(diann_colname, collapse = "|"), negate=TRUE) ,
                     name = "precursor")


## really important arrange w.r.t to the samplesnames$sample to preserve the right order

design <- design %>%  arrange(factor(sample, levels = samplenames$sample))

colData(pe)$Group <- factor(design$group)
colData(pe)$SampleName <- design$sample

#group column from design is now Group in coData(pe)

colData(pe)$Replicate <- factor(design$replicate)


custom_col <- setdiff(colnames(design),min_col_need_design )

#log_formatter(formatter_pander)
#log_info(pe)

if (length(custom_col) >= 1){
    for (col_add in custom_col){
       
      if  (is.character(design[[col_add]])) {
        log_info(paste('Chr ', col_add))
          colData(pe)[[col_add]]<- as.factor(design[[col_add]])
      }else{  
        log_info(paste('Num ', col_add))
  	     colData(pe)[[col_add]] <-  as.numeric(design[[col_add]])
      }
      
      }
}

  check_confounder_PCA<-checkConfounder(confounder= unique(unlist(str_split(params$PCA_comparison, "-"))), colsDesign=colnames(colData(pe)))
if (check_confounder_PCA$status == 1){
    stop(check_confounder_PCA$error)
}


#log_info('{ dim(colData(pe)[2] }')
rowData(pe[["precursor"]])$nNonZero <- pe[["precursor"]] %>%
  assay %>%
  is.na %>%
  not %>%
  rowSums

rowData(pe[["precursor"]])$pep_per_prot <-
  left_join(rowData(pe[["precursor"]]) %>% as.data.frame %>% dplyr::select(Protein.Ids),
            rowData(pe[["precursor"]]) %>% as.data.frame %>% dplyr::group_by(Protein.Ids) %>%
              summarise(pep_per_prot = length(unique(Stripped.Sequence))))$pep_per_prot

```

The pre-processing steps are:

-   Filtering precursor with more than **`r params$nNonZero`** samples with no missing intensities across all the samples
-   `r if (params$Proteotypic) 'Select only proteotypic peptides' else 'Select both not and proteotypic peptides'`
-   Select proteins with at least **`r params$pep_per_prot` peptides**
-   `r if (params$filtering_contaminats) 'Contaminats proteins are filtered ' else 'Contaminats proteins are not filtered'`

```{r pre_processing}


size <- dim(colData(pe))[1]

## filtering per group

 pe <- filterFeatures(pe, ~ nNonZero >= round(size  * ( params$nNonZero / 100))   )


# Proteotypic features

if (params$Proteotypic){
  pe <- filterFeatures(pe, ~ Proteotypic == 1)

}

## filtering out contaminats

if (params$filtering_contaminats){
  pe <- filterFeatures ( pe ,VariableFilter("Protein.Ids", params$contaminats_str, "contains", not=TRUE))

}

# At least 2 peptides per protein across all groups
pe <- filterFeatures(pe, ~ pep_per_prot > params$pep_per_prot)




pe <- logTransform(pe, base = 2, i = "precursor",
                   name = "precursorLog")

pe <- normalize(pe,  method = params$normalization, i = "precursorLog",
                name = "precursorNorm")
#MsCoreUtils::medianPolish()

pe <- aggregateFeatures(pe, i = "precursorNorm",
                        fcol = "Protein.Ids",
                        name = "proteinRS",
                        fun = aggr_method_f,
                        na.rm = TRUE)

```

```{r adding_ensembl_annotation}
if ( ! params$ensembl_annotation == ''){
  ## read it 
  ensembl_db_table <- read.csv(params$ensembl_annotation)
  ## make it simple 
  
  ensembl_db_table <- ensembl_db_table %>%  distinct(ensembl_gene_id , .keep_all=TRUE)  %>% 
      dplyr::select( params$ensembl_col    ) %>% distinct( hgnc_symbol, .keep_all=TRUE)
  app <- as.data.frame(rowData(pe[['proteinRS']]))  %>%  left_join( ensembl_db_table , join_by(Genes ==  hgnc_symbol)) 
  
  for (i in  1:(length( params$ensembl_col) -1) ){
     ann_col <- params$ensembl_col[i]
     
     rowData(pe[['proteinRS']])[[ann_col]] <- app[[ann_col]]
  }
 

}

```

## Confounder Values Analysis
```{r confounder_value_analysis}
# saveRDS(pe, file="C:\\Users\\catel\\OneDrive\\Documenti\\GitHub\\DIA-Report\\pe-obj.rds")
cData<-as.data.frame(colData(pe))
list_numeric <- list()
list_character <- list()

if (all(params$confounder_list != '')) {
  for  (col in params$confounder_list){
     if  (is.factor (cData[[col]])) {
       log_info(paste0('Character - ', col))
       list_character <- append(list_character, col)
        
     }else {
       log_info(paste0('Numeric - ', col))
       list_numeric <- append(list_numeric, col)
     }  
  }
  
  cData_n<-cData%>%pivot_longer(cols=unlist(list_numeric), names_to="Numeric_Variables", values_to="Value")
  
  boxplot_num <-ggplot(cData_n, aes(x=Numeric_Variables, y=Value, fill=Group))+geom_boxplot()
  print(boxplot_num)
  

		           boxplot_num <-ggplot(cData_n, aes(x=Numeric_Variables, y=Value, fill=Group))+geom_boxplot()
  print(boxplot_num)
               pdf(file= file.path(params$folder_prj,"Result",paste0('Boxplot_num.pdf')),paper="a4")
               boxplot_num <-ggplot(cData_n, aes(x=Numeric_Variables, y=Value, fill=Group))+geom_boxplot()
  print(boxplot_num)
      invisible(dev.off())
      
  
  for (col_ch in unlist(list_character)){
    log_info(col_ch)
    boxplot_ch<- ggplot(cData_n, aes(x={{col_ch}}, fill=Group))+geom_bar()+ggtitle( {{col_ch}} )
    print(boxplot_ch)
          pdf(file= file.path(params$folder_prj,"Result",paste0('Boxplot_ch.pdf')),paper="a4")
         boxplot_ch<- ggplot(cData_n, aes(x={{col_ch}}, fill=Group))+geom_bar()+ggtitle( {{col_ch}} )
    print(boxplot_ch)  
     
      invisible(dev.off())
  }

}


```


## Data Missing Analysis

The plot shows the completeness of the experiments at precursor and summarized level. On the the x-axis peptides/proteins are ordered based on the increasing NA content.

```{r missing_val_analysis}
peptidemissingness <- MSnbase::plotNA(assay(pe[["precursorNorm"]])) +
  xlab("Precursor index (ordered by data completeness)") +
  theme_bw() +
  theme(legend.position = "none") +
  theme(strip.text.x = element_blank(),
        strip.background = element_rect(colour="white", fill="white"),
        legend.position=c(.35,.15)
  ) +   ggtitle("Missingness - precursor level" )

proteinmissingness <- MSnbase::plotNA(assay(pe[["proteinRS"]])) +
  xlab("Protein index (ordered by data completeness)") +
  theme_bw() +
  theme(legend.position = "none") +
  theme(strip.text.x = element_blank(),
        strip.background = element_rect(colour="white", fill="white"),
        legend.position=c(.35,.15)
  ) +   ggtitle("Missingness - protein level")

#missingness <- gridExtra::grid.arrange(peptidemissingness, proteinmissingness, nrow = 1)
#print(missingness)

```

## Normalization

Raw intensities from DIA-NN are processed as follow:

-   Log 2 transformation
-   Normalized across all the samples using **`r params$normalization`** method
-   Summarization at protein level using **`r params$aggr_method`** function

```{r normalization_plot}
par(mfrow=c(1,3))
limma::plotDensities(assay(pe[["precursorLog"]]),legend=FALSE,main='Log-Transform')
limma::plotDensities(assay(pe[["precursorNorm"]]),legend=FALSE,main='Normalized') 
limma::plotDensities(assay(pe[["proteinRS"]]),legend=FALSE,main='Protein Summarization' )

saveRDS(pe, file ='C:\\Users\\catel\\OneDrive\\Documenti\\GitHub\\DIA-Report\\pe_debug.RDS')
```

## PCA

```{r pca_plot}

# to do make in for loop for a set of variable
log_info(params$folder_prj)
var_topca <- params$PCA_comparison

if (length(str_which(var_topca, "-"))== 0){
   prcompPe<-pe[["proteinRS"]] %>%
        filterNA() %>%
        assay() %>%
        t() %>%
        prcomp()
  
  pca_ <- ggplot(data=prcompPe$x) + ggtitle(paste0("PCA by ", var_topca)) +geom_point(aes(x=PC1, y=PC2, colour= colData(pe)[[var_topca]]), size=3) + xlab(paste("PC1", percent(summary(prcompPe)$importance[,"PC1"][[2]], accuracy = 0.1))) + ylab(paste("PC2", percent(summary(prcompPe)$importance[,"PC2"][[2]], accuracy = 0.1))) + labs(colour=var_topca)
		
   plot(pca_)
 } else {

	for (v in var_topca) {
	 
	 
	  comparisonPCA <- unlist(strsplit(var_topca[var_topca==v],'-',fixed=T))
	  
	  prcompPe<-pe[["proteinRS"]] %>%
			filterNA() %>%
			assay() %>%
			t() %>%
			prcomp()
		
	  first_comp<-comparisonPCA[1]
	  second_comp<-comparisonPCA[2]
	  
	  if (class(colData(pe)[[first_comp]])==class(colData(pe)[[second_comp]])) {
	  break
	  }else{
	  
		  if (is.numeric(colData(pe)[[first_comp]])){
			num_comp<-first_comp
			chr_comp<-second_comp
			}else {
			num_comp<-second_comp
			chr_comp<-first_comp
			}
		  log_info(paste0("numerical ",num_comp))
		  log_info(paste0("categorical ",chr_comp))
		  pca_ <- ggplot(data=prcompPe$x) + ggtitle(paste0("PCA by ", v)) +geom_point(aes(x=PC1, y=PC2, colour= colData(pe)[[num_comp]],shape = colData(pe)[[chr_comp]]), size=3 ) + xlab(paste("PC1", percent(summary(prcompPe)$importance[,"PC1"][[2]], accuracy = 0.1)))  + ylab(paste("PC2", percent(summary(prcompPe)$importance[,"PC2"][[2]], accuracy = 0.1))) + labs(colour=num_comp, shape=chr_comp)
				
		 plot(pca_)
		 
		          # pdf(file= paste0(file.path(params$folder_prj,"Result"),"PCA by ", v, ".pdf"),paper="a4")
		    log_info(file.path(params$folder_prj,"Result"))
		           pdf(file= file.path(params$folder_prj,"Result",paste0("PCA by ", v, ".pdf")),paper="a4")
		           plot(pca_)
     
      invisible(dev.off())
		 
		}
	}
}

```

## DE Analysis

Using MSqRob2 with the following formula `r params$formula` with ridge regression disabled

```{r build_model}

pe <- msqrob(object = pe, i = "proteinRS", 
             formula = as.formula( params$formula)  ,ridge = FALSE, overwrite = TRUE)


contrast_list <- paste0(params$comparisons, "=0")
#print(contrast_list)
coef <-  unique(unlist(strsplit(params$comparisons,' - ',fixed=T)))
#print(coef)

L <- makeContrast(contrast_list, parameterNames = coef)

# L <- makeContrast(c( "ridgeGroupB - ridgeGroupA = 0"), parameterNames = c("ridgeGroupB","ridgeGroupA"))
# rownames(L) <- paste0("ridge",rownames(L))


getCoef(rowData(pe[['proteinRS']])$msqrobModels[[1]])

pe <- hypothesisTest(object = pe, i = "proteinRS", contrast = L , overwrite=TRUE)



test <-  lapply(params$comparisons, DEP_volcano, data= pe,  p=params )


names(test) <- params$comparisons 




if (!dir.exists(file.path(params$folder_prj, "Result","Contrast"))){
  dir.create(file.path( params$folder_prj, "Result","Contrast"), recursive = TRUE)
}
for (a in params$comparisons){
  dir.create(file.path(params$folder_prj,"Result","Contrast",a), recursive = TRUE)
}



```

## QC plots

::: panel-tabset
```{r QC_plot}
#| results: asis
  for (cmp in names(test)) {
    cmp_label <- gsub(params$contrast,'',cmp )
    cat( '##', paste(cmp_label,' P-values distribution ',sep=' '), '\n\n')
    
    render_child(data = test[[cmp]], path=file.path(params$folder_prj, "Result","Contrast",cmp), template='_templatePval_distribution.Rmd') 
    cat('\n\n')
    
  }

```
:::

## Group Comparison

::: panel-tabset
```{r comparison}
#| results: asis

  for (cmp in names(test)) {
    cmp_label <- gsub(params$contrast,'',cmp )
    cat( '## ', paste(cmp_label,sep=' '), '\n\n')
    cat ('This volcano plot summarizes the differential expression landscape in the comparison between the two groups \n')
    
    log_info('Volcano')
    render_child(data = test[[cmp]],path=file.path( params$folder_prj, "Result","Contrast",cmp),  template='_templateContrast.Rmd') 
    cat('\n\n')
    
    filt_val <- unlist(str_split(substring(gsub(params$contrast, ' ', (gsub(' - ','',cmp))), 2),' ' ))
    #print(filt_val) 
    
    if ( dim(test[[cmp]]$toptable %>% filter(differential_expressed %in% c('UP','DOWN')) ) [1] <= 5   ){
      cat(' Not Significant proteins  to be visualized in in the  heatmap \n')
    }else{
    log_info('Heatmap')
      render_child(data = test[[cmp]], pe = pe
                 ,sample_rel = filt_val,
                 path= file.path(  params$folder_prj, "Result","Contrast",cmp),
                 template='_templateHeatmap.Rmd')
    }
    cat('\n\n')
    cat('\n\n')
    cat('\n\n')
    cat('These bar plots summarizes the number of significantly upregulated/downregulated number of proteins based on different adjusted p-values (selected adjusted p-values are 0.001, 0.01, 0.05, and 0.1 - see facet headers) and log2 fold-change thresholds (on the x-axis) used to define the significance levels.')
    log_info('renderChild')
    render_child(data = test[[cmp]],
                 path= file.path( params$folder_prj, "Result","Contrast",cmp),
                 template='_templateBarPlot.Rmd')
    cat('\n\n')
    
    
  }

```
:::

## Summary of the DE proteins

In the table you can find a summaries of the number of DE proteins found in all the comparisons. The overlapping of DE proteins among the comparisons is also showed using an upset plot.

```{r upset plot}
listInput <- list()
df_summary = as.data.frame(matrix(ncol=3, nrow=0))
i <- 1 
for (cmp in names(test)){
  cmp_label <- gsub(params$contrast,'',cmp )
  total =  dim(test[[cmp]]$toptable %>% filter(differential_expressed =='UP' |  differential_expressed =='DOWN') )[1]
  up  = dim(test[[cmp]]$toptable %>% filter(differential_expressed =='UP') )[1]
  down  =   dim(test[[cmp]]$toptable %>% filter(differential_expressed =='DOWN') )[1]
  log_info(cmp)
  log_info(total)
  #df_summary[[cmp_label]]  <- c(total, up,down)
  df_summary[i,1]  <- total
  df_summary[i,2]  <- up
  df_summary[i,3]  <- down

  if (total >  0){
    listInput[[cmp_label]] <- test[[cmp]]$toptable %>% filter(differential_expressed =='UP' |  differential_expressed =='DOWN') %>% pull(Protein.Names)
  }
  i <- i+1
}
rownames(df_summary) <- names(test) 
colnames(df_summary) <- c('Total DE','Up DE','Down DE')
    #log_info(df_summary)
    ## visual table summary
    DT::datatable( df_summary  ,
             extensions = c('FixedColumns', 'Scroller'),
             options = list(fixedColumns = TRUE, scrollY = 400, scrollX = TRUE,
                            scroller = TRUE, dom = 'Bfrtip', autoWidth = TRUE
             ),
     )
    # if there's 1 or 2 elements inlistInput and one of them is empty, skip uspset plot
    log_info({length(listInput)})
 if (length(listInput)>=2 ) {
    upset(fromList(listInput), order.by = "freq")
     
      pdf(file= paste0(file.path( params$folder_prj,"Result","Contrast"),'Upset_plot.pdf'),paper="a4")
       
     upset(fromList(listInput),  nsets = 7 , order.by = "freq",text.scale= 1,empty.intersections = "on")
      invisible(dev.off())
 
}
    #print(listInput)
    #upset(fromList(listInput), order.by = "freq")
     
# pdf(file= paste0(file.path( params$folder_prj,"Result","Contrast"),'Upset_plot.pdf'),paper="a4")
# 
# upset(fromList(listInput),  nsets = 7 , order.by = "freq",text.scale= 1,empty.intersections = "on")
# invisible(dev.off())
    
```

## Session Info

```{r session_info }
sessionInfo()
```

---
title: "Proteomics Report: `r params$title`"
subtitle: "`r params$subtitle`"
author: "`r params$author`"
format: 
  html:
    fig-width: 10
    fig-height: 8
    toc: true
    css: style.css
execute: 
  echo: false
  warning: false
embed-resources: true
theme: "cosmo"
params:
  description: ""
  title: ""
  subtitle: ""
  author: "" 
  formula: ""
  comparisons: ""
  contrast: ""
  input_file: ""
  design_file: ""
  FC_thr: 1
  adjpval_thr: 0.05
  Proteotypic: TRUE
  pep_per_prot: 3
  nNonZero: 3
  aggr_method: ""
  normalization: ""
---

<style>
#logo
{
    position: relative;
}
#logo img {
    /*position: relative;*/
    top: 25px;
    /*right: 0px;*/
    left: 50px;
    position: fixed;
    width: 125px;
    }
#header .btn-group {
    display: none;
}
body
{
    position: absolute;
    top: 150px;
}
</style>

<div id="logo" align="top">
```{r echo = FALSE}
knitr::include_graphics('images/vib_rf_medical_biotechnology_rgb_neg.jpg')
```
</div>


```{r input}
 #| output: false

library(QFeatures)
library(msqrob2)
library(readxl)
library(SummarizedExperiment)
library(visdat)
library(dplyr)
library(tidyverse)
library(magrittr)
library(here)
library(tidyr)
library(plotly)
library(DT)
library(tibble)
library(MSnbase)
library(factoextra)
library(visdat)
library(hrbrthemes)
library(ggVennDiagram)
library(gridExtra)
library(biomaRt)
```


## Experiment 

`r params$description`



```{r functions}
 dfToWideMsqrob <- function(data, precursorquan) {
   data %>%
     filter(
       PG.Q.Value <= 0.01 &
         Q.Value <= 0.01 &
         Precursor.Id != "" & 
         .data[[precursorquan]] > 0
     ) %>%
     dplyr::select(
       File.Name, 
       Precursor.Id, 
       Modified.Sequence, 
       Stripped.Sequence, 
       Protein.Group,
       Protein.Ids, 
       Protein.Names, 
       Genes, 
       Proteotypic,
       First.Protein.Description,
       .data[[precursorquan]]
     ) %>%
     tidyr::pivot_wider(
       names_from = File.Name,
       values_from = .data[[precursorquan]]
     )
 }

DEP_volcano <- function ( label, data ,  imagesDir ,p= params){
  #quantile_protein
  #data_selector= 'batch_corrected'
  cmp = label
  all_res <-  rowData(data[["proteinRS"]])[[label]]
  
  all_res$Protein.names <- rowData(pe[["proteinRS"]])[['Protein.names']]
  all_res <- all_res[ ! is.na(all_res$adjPval),]
  all_res$differential_expressed <- "NO"
  all_res$differential_expressed[all_res$logFC >= params$FC_thr & all_res$adjPval < params$adjpval_thr] <- "UP"
  all_res$differential_expressed[all_res$logFC <= - params$FC_thr & all_res$adjPval <  params$adjpval_thr] <- "DOWN"
  
  p1 <- ggplot(data = all_res , aes(x = logFC, y = -log10(pval) ,col=differential_expressed , label = all_res$Protein.names  )  )  +
    geom_point() +
    theme_minimal() +
    #geom_text_repel() +
    geom_vline(xintercept = c(- params$FC_thr, params$FC_thr),col="grey") +
    geom_hline(yintercept = -log10(params$adjpval_thr),col="grey") +
    scale_color_manual(values=c("DOWN"="blue","NO"="black", "UP"="red"))+
    ggtitle(paste0("Volcano ",cmp) )
  
  DEall <- all_res[!is.na(all_res$adjPval) ,c("adjPval","pval","logFC","differential_expressed")]
  return ( list( toptable =DEall , volcano = p1) )
}

 render_child <- function(data, path, pe, sample_rel,  template) {
   if (missing(pe)  ){
     res = knitr::knit_child(
      text = xfun::read_utf8( template),
      envir = rlang::env(data = data, path = path),
      quiet = TRUE
     )
     cat(res, sep = '\n')
    cat("\n")
   }else{
      res = knitr::knit_child(
      text = xfun::read_utf8( template),
      envir = rlang::env(data = data, pe = pe, sample_rel = sample_rel, params =params, path = path),
      quiet = TRUE
     )
     cat(res, sep = '\n')
    cat("\n")
    }
 }


```

```{r check_parameter}

if (params$contrast == '' ){
  stop("Check parameter file: contrast is not set" )
}

if (all(params$comparisons == '') ){
  stop("Check parameter file: comparisons is not set" )
}

if ( ! params$aggr_method %in% c('robustSummary','medianPolish')) {
  stop('normalization method not allowed.  Methods allowed are : [ robustSummary, medianPolish ]' )
}
if ( ! params$normalization %in% c("sum", "max", "center.mean", "center.median", "div.mean", "div.median", "diff.meda", "quantiles","quantiles.robust","vsn") ){ 
   stop('normalization method not allowed. Methods allowed are : [ sum, max, center.mean, center.median, div.mean, div.median, diff.meda, quantiles,quantiles.robust,vsn]' )
  } 
  ## to do visualize input data 

if (!dir.exists(file.path(".","Result"))){
  dir.create('./Result')
}

```
## Import data 

Reading DIA data from **`r params$input_file`** using *Precursor.Translated* intensities from DIA-NN.

All the precursors with *Q-value < 0.01* are used for the analysis.


```{r import data}
  # 'peptidesRCB.txt'  

  data <- read.csv(params$input_file,sep='\t')
  annotation <-  read.csv(params$design_file)


 dfMsqrob <- dfToWideMsqrob( data, precursorquan = "Precursor.Translated")

 
  samplenames <- tibble(
   filename = names(dfMsqrob)[str_which(names(dfMsqrob), ".mzML")], 
   samplename =  gsub('.mzML','',basename(filename) ) )
 
 names(dfMsqrob)[str_which(names(dfMsqrob), ".mzML")] <- samplenames$samplename
 


```

## Creating Q-Features object and run pre processing

```{r preparation }

 pe <- readQFeatures(table = dfMsqrob,
                     fnames = "Precursor.Id",
                     ecol = str_starts(names(dfMsqrob), 'B'),
                     name = "precursor")


colData(pe)$Group <- factor(annotation$group)
colData(pe)$Replicate <- factor(annotation$replicate)
colData(pe)$SampleName <- annotation$sample


rowData(pe[["precursor"]])$nNonZero <- pe[["precursor"]] %>%
  assay %>%
  is.na %>%
  not %>%
  rowSums

rowData(pe[["precursor"]])$pep_per_prot <-
  left_join(rowData(pe[["precursor"]]) %>% as.data.frame %>% dplyr::select(Protein.Ids),
            rowData(pe[["precursor"]]) %>% as.data.frame %>% dplyr::group_by(Protein.Ids) %>%
              summarise(pep_per_prot = length(unique(Stripped.Sequence))))$pep_per_prot

```

The pre- processing steps are:

 - Filtering precursor with more than **`r params$nNonZero`** samples with no missing intensities across all the samples 
 - `r if (params$Proteotypic) 'Select only proteotypic peptides' else 'Select both not and proteotypic peptides'`
 - Select proteins with at least **`r params$pep_per_prot` peptides**

```{r pre_processing}

pe <- filterFeatures(pe, ~ nNonZero >= params$nNonZero)
# nrow(pe[["precursor"]]) # 153207 precursors
# length(unique(rowData(pe[["precursor"]])$Protein.Ids)) # 19534 proteins

# Proteotypic features

if (params$Proteotypic){
  pe <- filterFeatures(pe, ~ Proteotypic == 1)
# nrow(pe[["precursor"]]) # 145712
# length(unique(rowData(pe[["precursor"]])$Protein.Ids)) # 17105
}


# At least 2 peptides per protein across all groups
pe <- filterFeatures(pe, ~ pep_per_prot > params$pep_per_prot)
# nrow(pe[["precursor"]]) # 139581
# length(unique(rowData(pe[["precursor"]])$Protein.Ids)) # 12034



pe <- logTransform(pe, base = 2, i = "precursor",
                   name = "precursorLog")

pe <- normalize(pe,  method = params$normalization, i = "precursorLog",
                name = "precursorNorm")


pe <- aggregateFeatures(pe, i = "precursorNorm",
                        fcol = "Protein.Ids",
                        name = "proteinRS",
                        fun = params$aggr_method,
                        na.rm = TRUE)
```

## Data Missing Analysis

```{r missing_val_analysis}
peptidemissingness <- MSnbase::plotNA(assay(pe[["precursorNorm"]])) +
  xlab("Precursor index (ordered by data completeness)") +
  theme_bw() +
  theme(legend.position = "none") +
  theme(strip.text.x = element_blank(),
        strip.background = element_rect(colour="white", fill="white"),
        legend.position=c(.35,.15)
  )

proteinmissingness <- MSnbase::plotNA(assay(pe[["proteinRS"]])) +
  xlab("Protein index (ordered by data completeness)") +
  theme_bw() +
  theme(legend.position = "none") +
  theme(strip.text.x = element_blank(),
        strip.background = element_rect(colour="white", fill="white"),
        legend.position=c(.35,.15)
  )

#missingness <- gridExtra::grid.arrange(peptidemissingness, proteinmissingness, nrow = 1)
#print(missingness)

```

## Normalization 

Raw intensities from DIA-NN are processed as follow:

 - Log 2 transformed 
 - Normalized across all the samples using **`r params$normalization`** method
 - Summarization at protein level using **`r params$aggr_methods`** function


```{r normalization_plot}
par(mfrow=c(1,3))
limma::plotDensities(assay(pe[["precursorLog"]]),legend=FALSE,main='Log-Transform')
limma::plotDensities(assay(pe[["precursorNorm"]]),legend=FALSE,main='Normalized') 
limma::plotDensities(assay(pe[["proteinRS"]]),legend=FALSE,main='Protein Summarization' )


```


## PCA 


```{r pca_plot}

# to do make in for loop for a set of variable
plot_c<- 1

pca_ <-
  pe[["proteinRS"]] %>%
  filterNA() %>%
  assay() %>%
  t() %>%
  prcomp() %>%
  fviz_pca_ind(habillage = colData(pe)$Group  , geom=c("point"), addEllipses=FALSE, repel = FALSE ,title = "PCA by Group")
plot(pca_)

png(filename= file.path(".","Result",paste0("PCA_",plot_c ,".png")), width=10, height=8, res=200, units="in")
plot(pca_)
invisible(dev.off())

plot_c <- plot_c + 1

pca_ <-
  pe[["proteinRS"]] %>%
  filterNA() %>%
  assay() %>%
  t() %>%
  prcomp() %>%
  fviz_pca_ind(habillage = colData(pe)$Replicate, geom=c("point"), addEllipses=FALSE,  repel = TRUE ,title = "PCA by Replicate")
plot(pca_)

png(filename= file.path(".","Result",paste0("PCA_",plot_c ,".png")), width=10, height=8, res=200, units="in")
plot(pca_)
invisible(dev.off())

```

## DE Analysis 

Using MSqRob2.

```{r build_model}

pe <- msqrob(object = pe, i = "proteinRS", 
             formula = ~ -1 +Group  ,ridge = FALSE, overwrite = TRUE)


contrast_list <- paste0(params$comparisons, "=0")
#print(contrast_list)
coef <-  unique(unlist(strsplit(params$comparisons,' - ',fixed=T)))
#print(coef)

L <- makeContrast(contrast_list, parameterNames = coef)

# L <- makeContrast(c( "ridgeGroupB - ridgeGroupA = 0"), parameterNames = c("ridgeGroupB","ridgeGroupA"))
# rownames(L) <- paste0("ridge",rownames(L))


getCoef(rowData(pe[['proteinRS']])$msqrobModels[[1]])

pe <- hypothesisTest(object = pe, i = "proteinRS", contrast = L , overwrite=TRUE)


test <-  lapply(params$comparisons, DEP_volcano, data= pe,  p=params )
names(test) <- params$comparisons 

# make a subfolder for each contrast
if (!dir.exists(file.path(".","Result","Contrast"))){
  dir.create(file.path(".","Result","Contrast"))
}
for (a in params$comparisons){
  dir.create(file.path(".","Result","Contrast",a))
}


```



## QC plots

::: {.panel-tabset}

```{r QC_plot}
#| results: asis
  for (cmp in names(test)) {
    cat( '##', paste(cmp,' P-values distribution ',sep=' '), '\n\n')
    
    render_child(data = test[[cmp]], path=file.path(".","Result","Contrast",cmp), template='_templatePval_distribution.Rmd') 
    cat('\n\n')
    
  }

```

:::

## Group Comparison   

::: {.panel-tabset}

```{r comparison}
#| results: asis

  for (cmp in names(test)) {
    cat( '##', paste(cmp,' Volcano plot',sep=' '), '\n\n')
    

    
    render_child(data = test[[cmp]],path=file.path(".","Result","Contrast",cmp),  template='_templateContrast.Rmd') 
    cat('\n\n')
    
    filt_val <- unlist(str_split(substring(gsub(params$contrast, ' ', (gsub(' - ','',cmp))), 2),' ' ))
    print(filt_val)   
    render_child(data = test[[cmp]], pe = pe
                 ,sample_rel = filt_val,
                 path= file.path(".","Result","Contrast",cmp),
                 template='_templateHeatmap.Rmd')
    cat('\n\n')
    
    
    
  }

```
:::



## Session Info
```{r session_info }
sessionInfo()
```

